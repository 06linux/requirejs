- Developer page? Code style guidelines?

- Build option to remove files that are not part of a layer.
- Make sure text plugin works offline.
- Make sure text plugin works in rhino env.
- Get Blackberry simulator. Blackberry greater than 4.6, and particulary with the Blackberry 9500 simulator (with OS v4.7),
install and launch Blackberry MDS service simulator before running simulator to get network.
- Really try to see if we can just use . for the text! file suffix instead of ! I keep mistyping.

- Use JSDoc to document a full module?

- Fix build.bat on windows.

- loading more than one locale for a page. A locales= option? Need this for full
  Dojo conversion.

- Talking with Bryan: onScriptLoad is not really needed in a pure require() case, maybe
allow at least a build pragma to exclude it.

- When doing docs via jsdoc, using {some/module} as return types? How does JSDoc deal with the nested objects?
  Probably needs custom work to get it recognize the module concept thing.

- Determine if document.write helps with Operation Aborted in IE.

- Document build tool.

Considered, but not implemented
-------------------------------
- Bryan: test if document load and document domcontentloaded. Safari 3 has trouble, can do addEventListener, but no DOMContentLoaded?
  Tested existing code (uses window load and document domcontentloaded, and require.ready fires correctly in Safari 3.2.3 on Windows, so this is not a high priority
  item.

- Use . instead of ! for file extensions for text! dependencies? It is tempting, but it gives
  mixed guidance for things like .js files. When a dependency ends in .js it is loaded
  relative to the page's URL. However, text! extensions should always use the baseUrl/config.paths
  paths. So leaving the separator as ! or now.

- Look at module function call during recurse instead of building up the ordered
  array of modules. It was there to prevent issues with small call stacks in older Safaris,
  but now that should not be a problem. Not a big decrease in file size to switching,
  but just means there is fewer looping going on, so bulk perf gain? But it is just one
  loop reduction, small to the amount of function calling going on? Complicates build
  system too, where it overrides callModules to get the list of modules.
