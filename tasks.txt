- build issue: module defined like so:
run(
  "dimple",
  {
    color: "dimple-blue"
  }
);
will get an extra run("dimple", function(){}) output in a layer. Because it does not get tracked
by run.modulesWithNames. See simple.build.js.

- Fix runbuild.bat on windows.

- Expand tests for no head tag, slow connection. Put run.js in a div inside body, or head tag after
body etc...

- loading more than one locale for a page. A locales= option? Need this for full
  Dojo conversion.

- Talking with Bryan: onScriptLoad is not really needed in a pure run() case, maybe
allow at least a build pragma to exclude it.

- When doing docs via jsdoc, using {some/module} as return types? How does JSDoc deal with the nested objects?
  Probably needs custom work to get it recognize the module concept thing.

- Specifying locale: root for a build layer puts the root bundles in the layer,
but something weird is going on, where they still seem to be requested? And the browser
gets really slow up at the end (in FF)?

- Determine if document.write helps with Operation Aborted in IE.

- Add CSS optimization support (from dojo) to build tool.

- Document build tool.

- Rhino tests.

- Build converters that can convert dojo and commonjs modules into runjs format.

Considered, but not implemented
-------------------------------
- Bryan: test if document load and document domcontentloaded. Safari 3 has trouble, can do addEventListener, but no DOMContentLoaded?
  Tested existing code (uses window load and document domcontentloaded, and run.ready fires correctly in Safari 3.2.3 on Windows, so this is not a high priority
  item.

- Use . instead of ! for file extensions for text! dependencies? It is tempting, but it gives
  mixed guidance for things like .js files. When a dependency ends in .js it is loaded
  relative to the page's URL. However, text! extensions should always use the baseUrl/config.paths
  paths. So leaving the separator as ! or now.

- Look at module function call during recurse instead of building up the ordered
  array of modules. It was there to prevent issues with small call stacks in older Safaris,
  but now that should not be a problem. Not a big decrease in file size to switching,
  but just means there is fewer looping going on, so bulk perf gain? But it is just one
  loop reduction, small to the amount of function calling going on? Complicates build
  system too, where it overrides callModules to get the list of modules.

Completed Items
==================
0.0.6
------------
Removed the Function specifier. That was for circular dependencies, but due to
concerns about identity, decided to not support that use case. Now, a module
function can return any value it wants to define itself, can be Function, Object,
String, Number, Boolean, whatever. And now, for circular dependency, the circular
dependency will be null. I decided not to throw in that case because I wan run to
be able to load existing code that does not call back to run to define a module.
To support circular dependencies, the module function can use run.get() to fetch
that circular dependency later, outside the circular dependency loop.

0.0.5
------------
Introduce plugin concept for run.js. i18n code moved to a plugin.

0.0.4
------------
pause/resume for build layers

0.0.3
------------
- Module modifiers
- Better function module support
- Allow run() calls that just have a config object.

0.0.2
------------
- Allow modules to be defined with a plain object instead of a callback.
- i18n bundle support.

0.0.1
------------
- Basic module loading
- Support non-runjs module loading, if file ends in .js
- Supports loading modules with different versions by using context names in
  top-level run() calls.
